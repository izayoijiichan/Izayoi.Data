<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CustomValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} は無効です。</value>
    <comment>{0} is not valid.</comment>
  </data>
  <data name="RangeAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールド は {1} から {2} の間である必要があります。</value>
    <comment>The field {0} must be between {1} and {2}.</comment>
  </data>
  <data name="RegexAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは正規表現 '{1}'と一致する必要があります。</value>
    <comment>The field {0} must match the regular expression '{1}'.</comment>
  </data>
  <data name="RequiredAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは必須です。</value>
    <comment>The {0} field is required.</comment>
  </data>
  <data name="StringLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは{1}文字以内である必要があります。</value>
    <comment>The field {0} must be a string with a maximum length of {1}.</comment>
  </data>
  <data name="ValidationAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは無効です。</value>
    <comment>The field {0} is invalid.</comment>
  </data>
  <data name="StringLengthAttribute_ValidationErrorIncludingMinimum" xml:space="preserve">
    <value>{0} フィールドは {2}文字以上 {1} 文字以内である必要があります。</value>
    <comment>The field {0} must be a string with a minimum length of {2} and a maximum length of {1}.</comment>
  </data>
  <data name="CreditCardAttribute_Invalid" xml:space="preserve">
    <value>{0} フィールドは有効なクレジットカート番号ではありません。</value>
    <comment>The {0} field is not a valid credit card number.</comment>
  </data>
  <data name="EmailAddressAttribute_Invalid" xml:space="preserve">
    <value>{0} フィールドは有効な電子メールアドレスではありません。</value>
    <comment>The {0} field is not a valid e-mail address.</comment>
  </data>
  <data name="FileExtensionsAttribute_Invalid" xml:space="preserve">
    <value>{0} フィールドは拡張子が次のファイルのみを受け入れます：{1}</value>
    <comment>The {0} field only accepts files with the following extensions: {1}</comment>
  </data>
  <data name="UrlAttribute_Invalid" xml:space="preserve">
    <value>{0} フィールドは、有効な完全修飾 http、https、または ftp URL ではありません。</value>
    <comment>The {0} field is not a valid fully-qualified http, https, or ftp URL.</comment>
  </data>
  <data name="CompareAttribute_MustMatch" xml:space="preserve">
    <value>'{0}' と '{1}' が一致しません。</value>
    <comment>'{0}' and '{1}' do not match.</comment>
  </data>
  <data name="PhoneAttribute_Invalid" xml:space="preserve">
    <value>{0} フィールドは有効な電話番号ではありません。</value>
    <comment>The {0} field is not a valid phone number.</comment>
  </data>
  <data name="MaxLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは最大長が{1}の文字列または配列である必要があります。</value>
    <comment>The field {0} must be a string or array type with a maximum length of '{1}'.</comment>
  </data>
  <data name="MinLengthAttribute_ValidationError" xml:space="preserve">
    <value>{0} フィールドは最小長が{1}の文字列または配列である必要があります。</value>
    <comment>The field {0} must be a string or array type with a minimum length of '{1}'.</comment>
  </data>
</root>